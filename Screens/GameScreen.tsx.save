Rimport React, { useState, useEffect, useRef } from "react";
import { View, Text, StyleSheet, Alert } from 'react-native';
import AwaitsTapModal from "../Components/AwaitsTapModal";
import FullScreenModal from "../Components/FullScreenModal";
import data from '../assets/db/tmp.json';
import { faHourglass } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';

import Sound from 'react-native-sound';

// Enable playback in silent mode (iOS only)
Sound.setCategory('Playback');

const shuffleArray = (array) => {
    const shuffledArray = [...array];
    for (let i = shuffledArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
    }
    return shuffledArray;
};

const pickRandomKey = (obj) => {
    const keys = Object.keys(obj);
    const randomIndex = Math.floor(Math.random() * keys.length);
    return keys[randomIndex];
};

const moves = {
    'Τι είμαι;': 'whoami',
    'Πες το με ήχο!': 'sound',
    'Παντομίμα': 'gestures',
};

function GameScreen({ route }) {
    let { playerNames, roundsCount, seconds } = route.params;
    const [currentRound, setCurrentRound] = useState(1);
    const [playerPlaying, setPlayerPlaying] = useState(0);  // Index of the current player
    const [actionPlaying, setActionPlaying] = useState(null);
    const [actionPlayingName, setActionPlayingName] = useState(null);
    const [timeLeft, setTimeLeft] = useState(seconds);  // Initialize with 'seconds'
    const [modalVisible, setModalVisible] = useState(false);
    const [categoryName, setCategoryName] = useState(null);
    const [challenge, setChallenge] = useState(null);
    const [awaitModalVisible, setAwaitModalVisible] = useState(true);
    const [playerAsking, setPlayerAsking] = useState(1);

    const gameStart = () => {
        playerNames = shuffleArray(playerNames);  // Shuffle the players at the start
        setPlayerPlaying(0);  // Start with the first player
        setPlayerAsking(1);  // Set the next player to ask
        setCurrentRound(1);  // Initialize round

        const moveKey = pickRandomKey(moves);
        setActionPlaying(moveKey);
        setActionPlayingName(moves[moveKey]);

        const category = pickRandomKey(data.challenges);
        const challengeList = data.challenges[category][moves[moveKey]];
        console.log(data)

        console.log(challengeList)
        setChallenge(challengeList[Math.floor(Math.random() * challengeList.length)]);
        setCategoryName(category);
    };

    const switchPlayer = () => {
        const nextPlayer = (playerPlaying + 1) % playerNames.length;  // Cycle players
        setPlayerPlaying(nextPlayer);

        const nextAskingPlayer = (nextPlayer + 1) % playerNames.length;  // Ensure it wraps around
        setPlayerAsking(nextAskingPlayer);

        // If the current player was the last one, move to the next round
        if (playerPlaying === playerNames.length - 1) {
            if (currentRound < roundsCount) {
                setCurrentRound((prevRound) => prevRound + 1);  // Move to the next round
                playerNames = shuffleArray(playerNames);  // Shuffle players for the new round
                setPlayerPlaying(0);  // Reset to the first player of the new round
                setPlayerAsking(1);   // Reset asking player
            } else {
                Alert.alert("Game Over!");  // End the game if roundsCount is reached
                return;
            }
        }

        // Pick new action and challenge
        const moveKey = pickRandomKey(moves);
        setActionPlaying(moveKey);
        setActionPlayingName(moves[moveKey]);

        const category = pickRandomKey(data.challenges);
        const challengeList = data.challenges[category][moves[moveKey]];
        setChallenge(challengeList[Math.floor(Math.random() * challengeList.length)]);
        setCategoryName(category);
    };

    useEffect(() => {
        gameStart();
    }, []);

    useEffect(() => {
        let timer;
        if (currentRound <= roundsCount && timeLeft > 0) {
            timer = setInterval(() => {
                setTimeLeft((prev) => prev - 1);
            }, 1000);

            if (timeLeft === 10) {
                playBeep();
            }

        } else if (currentRound <= roundsCount && timeLeft === 0) {
            clearInterval(timer);
            setModalVisible(true);  // Show modal when time runs out
        } else if (currentRound > roundsCount) {
            Alert.alert('Game Finished');
        }

        return () => clearInterval(timer);  // Clean up the timer
    }, [timeLeft, currentRound, roundsCount]);

    const closeModal = () => {
        switchPlayer();
        setModalVisible(false);
        setAwaitModalVisible(true);
        setTimeLeft(seconds);  // Reset the timer for the next round
    };

    const beepSound = useRef(null);  // useRef for persistent sound reference

    useEffect(() => {
        // Load the sound file
        beepSound.current = new Sound(require('../assets/countdown.mp3'), Sound.MAIN_BUNDLE, (error) => {
            if (error) {
                console.log('Failed to load the sound', error);
                return;
            }
        });

        // Cleanup the sound when the component unmounts
        return () => {
            beepSound.current.release();
        };
    }, []);

    const playBeep = () => {
        if (beepSound.current) {
            beepSound.current.play((success) => {
                if (!success) {
                    console.log('Sound playback failed');
                }
            });
        }
    };

    return (
        <View style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}>
            <View style={styles.banner}>
                <Text style={styles.h1}>Γύρος {currentRound} από {roundsCount}</Text>
            </View>

            <View style={styles.card}>
                <Text style={styles.title}>
                    {actionPlaying}
                </Text>
                <View style={styles.line} />
                <Text style={styles.title1}>{challenge}</Text>
            </View>

            <View style={styles.time}>
                <FontAwesomeIcon icon={faHourglass} size={32} color="#C1121F" />
                <Text style={styles.title12}>{timeLeft} seconds left</Text>
            </View>

            <AwaitsTapModal
                visible={awaitModalVisible}
                onTap={() => {
                    setAwaitModalVisible(false);
                    setTimeLeft(seconds || 3);
                }}
                playerName={playerNames[playerPlaying]}
                action={actionPlaying}
                categoryName={categoryName}
                playerAsking={playerNames[playerAsking]}
            />

            <FullScreenModal
                visible={modalVisible}
                onClose={closeModal}
                playerName={playerNames[playerPlaying]} />
        </View>
    );
}

const styles = StyleSheet.create({
    card: {
        alignItems: 'center',
        backgroundColor: '#003049',
        width: '80%',
        borderRadius: 20,
        rowGap: 8,
        height: '30%'
    },
    banner: {
        backgroundColor: '#669bbc',
        width: '100%',
        alignItems: 'center',
        padding: 8
    },
    time: {
        alignItems: 'center'
    },
    title: {
        fontSize: 32,
        fontWeight: 'bold',
        color: '#fdf0d5',
        alignItems: 'center',
        justifyContent: 'center',
    },
    title1: {
        fontSize: 32,
        color: '#fdf0d5',
        alignItems: 'center',
        justifyContent: 'center',
    },
    h1: {
        textDecorationLine: 'underline',
        fontSize: 16,
        fontWeight: 'bold',
        color: '#fdf0d5'
    },
    line: {
        height: 1, // Height of the line
        backgroundColor: 'white', // Color of the line
        width: '100%', // Make it stretch across the screen
    },
});

export default GameScreen;
